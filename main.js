if (!window.addons){
    initFunction()
}
async function initFunction(){
    window.addons = {}
    await new Promise(resolve => setTimeout(resolve, 1000));

    //controls.runNodeClickHandlers=function(n){for(var o in internalNodeHandlerManips(n),controls.nodeClickHandlers)o==n&&controls.nodeClickHandlers[o](n)};

    let TouchNode = `controls.runNodeClickHandlers=function(n){`
    addons.maritime ? TouchNode+='internalNodeHandlerMaritime(n);' : null
    addons.manips ? TouchNode+='internalNodeHandlerManips(n);' : null
    TouchNode+=`for(var d in controls.nodeClickHandlers)d==n&&controls.nodeClickHandlers[d](n)};`

    let AddPart = `geofs.aircraft.Aircraft.prototype.addParts=function(e,n,t,o){t=t||1;for(var i=0;i<e.length;i++){if((O=e[i]).include){var a=geofs.includes[O.include];$.extend(!0,O,a[0]);for(var s=1;s<a.length;s++){(r=Object.assign({},a[s],{parent:O.name})).name=O.name+r.name,e.push(r)}}if(O.indices&&O.indices>0){for(s=2;s<=O.indices;s++){var r;(r=Object.assign({},O,{indices:null})).name=O.name+s,r.node=r.node+s,e.push(r)}O.name+="1",O.node+="1"}}for(i=0;i<e.length;i++){(O=e[i]).points=O.points||{},O.type=O.type||!1,O.brakesController=O.brakesController||!1,O.animations=O.animations||[],geofs.aircraft.instance.parts[O.name]=O,geofs.aircraft.instance.addOffsets(O,t),O.forceDirection&&(O.forceDirection=AXIS_TO_INDEX[O.forceDirection]),O.rotation&&(O.rotation=V3.toRadians(O.rotation)),O.modelOnlyRotation&&(O.modelOnlyRotation=V3.toRadians(O.modelOnlyRotation)),O.scale=O.scale||[1,1,1],O.scale=V3.scale(O.scale,t),O.originalScale=O.scale,geofs.version<4&&(O.gltf2model=null);let o=O.gltf2model||O.model;if(o){var l=o.url||o;n&&"/"!=l[0]&&!O.include&&(l=n+l);let e={shadows:O.shadows?window[O.shadows]:SHADOWS_ALL,incrementallyLoadTextures:!1,forceZup:O.gltf2model||O.forceZup};o.shader&&(e.customShader=geofs.api.generateShader(o.shader,n)),O["3dmodel"]=new geofs.api.Model(l,e),this.models.push(O["3dmodel"]._model),O.renderer&&(O.rendererInstance=new instruments.Renderer(O.renderer))}if(O.light){O.lightBillboard=new geofs.fx.light(null,O.light,{scale:.2}),geofs.aircraft.instance.lights.push(O)}if(O.object3d=new Object3D(O),O.suspension){if(O.suspension.length?(O.suspension.origin=[O.collisionPoints[0][0],O.collisionPoints[0][1],O.collisionPoints[0][2]+O.suspension.length],c=O.suspension.length):(O.suspension.origin=[O.collisionPoints[0][0],O.collisionPoints[0][1],0],c=-O.collisionPoints[0][2]),O.suspension.restLength=c,"rotation"==O.suspension.motion){var c,f,d=V3.length(O.collisionPoints[0]),p=Math.atan2(O.collisionPoints[0][0]/d,O.collisionPoints[0][2]/d);f=p<0?p+HALF_PI:p-HALF_PI,g={type:"rotate",axis:O.suspension.axis||"Y",value:O.name+"Suspension",ratio:f*RAD_TO_DEGREES*(O.suspension.ratio||1)}}else g={type:"translate",axis:O.suspension.axis||"Z",value:O.name+"Suspension",ratio:O.suspension.ratio||1};O.animations.push(g),O.suspension.hardPoint=O.suspension.hardPoint||.5,O.points.suspensionOrigin=V3.dup(O.suspension.origin),geofs.aircraft.instance.suspensions.push(O)}for(var u=0;u<O.animations.length;u++){var g;if((g=O.animations[u]).ratio=g.ratio||1,g.offset=g.offset||0,g.currentValue=null,g.delay&&(g.ratio=g.ratio/(1-Math.abs(g.delay))),"rotate"==g.type){var m=g.method||"rotate";"parent"==g.frame&&(m="rotateParentFrame"),g.rotationMethod=O.object3d[m+g.axis]}"translate"!=g.type||geofs.isArray(g.axis)||(g.axis=AXIS_TO_VECTOR[g.axis])}if("wheel"==O.type&&(O.radius=O.radius||1,O.arcDegree=O.radius*TWO_PI/360,O.angularVelocity=0,geofs.aircraft.instance.wheels.push(O)),"airfoil"==O.type&&(O.lift=0,O.angleOfAttack=0,geofs.aircraft.instance.airfoils.push(O),O.stalls=O.stalls||!1,O.stallIncidence=O.stallIncidence||12,O.zeroLiftIncidence=O.zeroLiftIncidence||16,O.aspectRatio=O.aspectRatio||DEFAULT_AIRFOIL_ASPECT_RATIO,O.aspectRatioCoefficient=O.aspectRatio/O.aspectRatio+2),"engine"==O.type&&(O.rpm=0,geofs.aircraft.instance.definition.originalInertia=geofs.aircraft.instance.definition.engineInertia,geofs.aircraft.instance.engines.push(O),O.contrail&&(O.contrailEmitter=new geofs.fx.ParticleEmitter({off:!0,anchor:O.points.contrailAnchor,duration:1e10,rate:.05,life:4e4,easing:"easeOutQuart",startScale:.01,endScale:.01,randomizeStartScale:.02,randomizeEndScale:.15,startOpacity:.1,endOpacity:1e-5,startRotation:"random",texture:"whitesmoke"}))),"balloon"==O.type&&(O.temperature=O.initialTemperature||0,O.coolingSpeed=O.coolingSpeed||0,geofs.aircraft.instance.balloons.push(O)),O.collisionPoints){for(var h=O.collisionPoints,y=geofs.aircraft.instance.definition.contactProperties[O.contactType||O.type],P=0;P<h.length;P++)h[P].part=O,h[P].contactProperties=y,geofs.aircraft.instance.collisionPoints.push(h[P]);O.volume||O.buoyancy||("airfoil"==O.type?O.volume=this.definition.mass/(400*h.length):O.volume=.1,O.area=O.area||0),O.dragVector=O.dragVector||[1,1,1],O.dragVector=V3.scale(O.dragVector,1/h.length)}O.volume&&(O.buoyancy=WATER_DENSITY*GRAVITY*O.volume),O.controller&&(geofs.aircraft.instance.controllers[O.controller.name]=O.controller)}for(i=0;i<e.length;i++){var O;if("root"!=(O=e[i]).name&&(O.parent||(O.parent="root"),geofs.aircraft.instance.parts[O.parent].object3d.addChild(O.object3d)),O.node&&(O.object3d.setModel(O.object3d.findModelInAncestry()),O.manipulator)){let e=O.manipulator;"string"==typeof e&&(e=geofs.aircraft.instance.aircraftRecord.isCommunity?null:geofs.utils.getFunctionFromString(e)),e&&(geofs.aircraft.instance.manipulators[O.node]=e,controls.addNodeClickHandler(O.node,(function(e){controls.manipulator=geofs.aircraft.instance.manipulators[e],controls.mouse.down=4})))}}`   
    addons.manips ? AddPart+='manipulators.checkCommunity();' : null
    AddPart+='}'
    console.log(AddPart)

    let controlsUpdate = `controls.update = function(a){try {controls.updateKeyboard(a);}catch (c){geofs.debug.error(c, "controls.updateTouch");}if ("joystick" == controls.mode)try {       controls.updateJoystick(a);}catch (c){       geofs.debug.error(c, "controls.updateJoystick");}if ( ! geofs.autopilot.on){controls.states.elevatorTrimUp ? (controls.trimUp(), controls.setters.setElevatorTrimUp.unset()): controls.states.elevatorTrimDown && (controls.trimDown(), controls.setters.setElevatorTrimDown.unset());if (("mouse" == controls.mode || "touch" == controls.mode) && ! controls.keyboard.override)try {controls.updateMouse(a);}catch (c){geofs.debug.error(c, "controls.updateMouse");}if ("orientation" == controls.mode)try {controls.updateOrientation(a);}catch (c){geofs.debug.error(c, "controls.updateOrientation");}if ("touch" == controls.mode)try {controls.updateTouch(a);}catch (c){geofs.debug.error(c, "controls.updateTouch");}var b = controls.exponential;controls.keyboard.override && (b = controls.keyboard.exponential);controls.roll *= controls.multiplier.roll;controls.rawPitch *= controls.multiplier.pitch;controls.yaw *= controls.multiplier.yaw;controls.roll *= Math.pow(Math.abs(controls.roll), b);controls.rawPitch *= Math.pow(Math.abs(controls.rawPitch), b);controls.rawYaw = controls.yaw;controls.mixYawRoll ? controls.yaw = controls.roll * controls.mixYawRollQuantity: (controls.keyboard.overrideRudder && (b = geofs.preferences.keyboard.exponential), controls.yaw *= Math.pow(Math.abs(controls.yaw), b), controls.rawYaw = controls.yaw);}controls.roll = clamp(controls.roll, - 1, 1);controls.rawPitch = clamp(controls.rawPitch, - 1, 1);controls.yaw = clamp(controls.yaw, - 1, 1);controls.pitch = controls.rawPitch + controls.elevatorTrim;b = 0;geofs.aircraft.instance.definition.reverse && (b = - 1, 0 < controls.throttle && (controls.reverse = 0));controls.throttle = controls.throttleAsReverse ? clamp( - controls.throttle, b, 0): clamp(controls.throttle - controls.reverse, b, 1);controls.animatePart("gear", a);controls.animatePart("flaps", a);controls.animatePart("airbrakes", a);controls.animatePart("optionalAnimatedPart", a);controls.animatePart("accessories", a);` 
    addons.maritime ? controlsUpdate+='animateMain(a);' : null
    controlsUpdate+='}'

    let textureURL = `geofs.fx.texture2url={smoke:"images/particles/smoke-light.png",whitesmoke:"images/particles/smoke-white.png",darkSmoke:"images/particles/smoke-dark.png",contrails:"images/particles/contrails.png",1:"images/lights/yellowflare.png",2:"images/lights/redflare.png",3:"images/lights/greenflare.png",white:"images/lights/whitelight.png",red:"images/lights/redlight.png",green:"images/lights/greenlight.png",whitepapi:"images/lights/whitepapi.png",redpapi:"images/lights/redpapi.png"`
    addons.maritime ? textureURL+=`,blue: "https://raw.githubusercontent.com/TotallyRealElonMusk/GeoFS-Extra-Maritime-Structures/main/lights/bluepapi.png",orange: 'https://raw.githubusercontent.com/TotallyRealElonMusk/GeoFS-Extra-Maritime-Structures/main/lights/orangepapi.png'` : null
    addons.smoke ? textureURL+=`,blueSmoke: "https://raw.githubusercontent.com/TotallyRealElonMusk/GeoFS-Airshow-Smoke-Addon/main/smokes/blue%20smoke.png", redSmoke:"https://raw.githubusercontent.com/TotallyRealElonMusk/GeoFS-Airshow-Smoke-Addon/main/smokes/red%20smoke.png", yellowSmoke:"https://raw.githubusercontent.com/TotallyRealElonMusk/GeoFS-Airshow-Smoke-Addon/main/smokes/yellow%20smoke.png", greenSmoke:"https://raw.githubusercontent.com/TotallyRealElonMusk/GeoFS-Airshow-Smoke-Addon/main/smokes/green%20smoke.png"` : null
    textureURL+='}'

    let itv = setInterval(
        function () {
            try {
                if (window.ui && window.flight) {
                    main()
                    clearInterval(itv);
                }

            } catch (err) { }
        }, 10);

    function main(){
        eval(TouchNode)
        eval(AddPart)
        eval(controlsUpdate)
        eval(textureURL)
    }
}
